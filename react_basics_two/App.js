import { useState } from "react";
import { StatusBar } from "expo-status-bar";

import {
  StyleSheet,
  Text,
  View,
  ScrollView,
  FlatList,
  Button,
} from "react-native";
import GoalItem from "./components/GoalItem";
import GoalInput from "./components/GoalInput";

export default function App() {
  const [courseData, setCourseData] = useState([]);
  const [showModal, setShowModal] = useState(false);

  const handleSubmit = (inputValue) => {
    setCourseData((textInput) => {
      return [...textInput, { text: inputValue, id: Math.random().toString() }];
    });
    // closing the modal after adding an item
    endGoalItem();
  };

  const deleteGoalItem = (id) => {
    console.log("DELETED");
    setCourseData((currentGoalItem) => {
      return currentGoalItem.filter((item) => item.id !== id);
    });
  };

  const startAddGoalItem = () => {
    setShowModal(true);
  };

  const endGoalItem = () => {
    setShowModal(false);
  };

  return (
    <>
      {/* // by default the outer container or the container (view) will always take
      the space available */}
      <StatusBar style="light" />
      <View style={styles.appContainer}>
        <Button
          title="Add Goal Item"
          color={"#5e0acc"}
          onPress={startAddGoalItem}
        />
        {/* Goal input component */}

        {/* passing onAddEvent handler to the goalInput component from the parent component */}

        <GoalInput
          onAddGoalItem={handleSubmit}
          showModal={showModal}
          onCancel={endGoalItem}
        />

        <View style={styles.itemList}>
          {/* <Text>List of goals....</Text> */}
          {/* ScrollView always render all the child items even those that can't be seen causing the perfomance issue or
        slow down the app. */}
          {/* <ScrollView>
          {courseData.map((item) => {
            return (
              <View key={item.id}>
                <Text>{item.text}</Text>
              </View>
            );
          })}
        </ScrollView> */}
          {/* In FlatList we nolonger need to use map to map through our data. */}

          <FlatList
            data={courseData}
            // renderItem prop is required prop that takes function as an arguement
            // itemData at an object generated by flatlist, contains an item and other meta data.
            // itemData hold a property called item.
            renderItem={(itemData) => {
              return (
                // goal
                <GoalItem
                  item={itemData.item.text}
                  id={itemData.item.id}
                  onDeleteItem={deleteGoalItem}
                />
              );
            }}
            // the keyExtractor prop will receive two parameter values this are item, and index
            keyExtractor={(item, index) => {
              return item.id;
            }}
          />
        </View>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  appContainer: {
    flex: 1,
    paddingTop: 50,
    paddingHorizontal: 16,
    // backgroundColor: "#1e085a",
  },
  itemList: {
    // padding: 5,
    flex: 5,
  },
});
